<!-- -------------------------------------
  NeHe Tutorial 10
  Original:  http://nehe.gamedev.net/tutorial/loading_and_moving_through_a_3d_world/22003/
  
  @author: rkwright@geofx.com
-------------------------------------- -->
 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>Three.js/NEHE Tutorial #10</title>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8"/>

		<!-- The following meta line optimizes the site for mobile devices. It sets the viewport size
		to the screen size, so it will be displayed maximized, but unscaled. -->
		<meta name="viewport" content="width=device-width, height=device-height, initial-scale=1"/>
		<link rel="stylesheet" type="text/css" href="NEHE.css" /> 

		<!-- Include two libraries from THREE.js: Core and the Detector for WebGL -->
		<script src="../js/three.min.js" type="text/javascript"></script>
		<script src="../js/Detector.js" type="text/javascript"></script>
		<script src="../js/OrbitControls.js" type="text/javascript"></script>
		<script src="Scene.js" type="text/javascript"></script>
	</head>
	<body>	
		<!-- This JavaScript block encloses the Three.js commands -->
		<script>			
			var nScene = new Scene( { axisHeight:10, controls:true });
			var	zRotation = 0;
			
			// set up the THREE.js scene
			nScene.initialize();
			
			// then initialize our demo's stuff
			initializeDemo();

			// Animate the scene
			animateScene();

			/**
			 * Initialize the scene.
			 */
			function initializeDemo() {
				
				// Create an array of materials to be used in a cube, one for each side
				var cubeMaterialArray = [];
				// order to add materials: x+,x-,y+,y-,z+,z-
				cubeMaterialArray.push( new THREE.MeshLambertMaterial( { color: 0xff3333 } ) );
				cubeMaterialArray.push( new THREE.MeshLambertMaterial( { color: 0xff8800 } ) );
				cubeMaterialArray.push( new THREE.MeshLambertMaterial( { color: 0xffff33 } ) );
				cubeMaterialArray.push( new THREE.MeshLambertMaterial( { color: 0x33ff33 } ) );
				cubeMaterialArray.push( new THREE.MeshLambertMaterial( { color: 0x3333ff } ) );
				cubeMaterialArray.push( new THREE.MeshLambertMaterial( { color: 0x8833ff } ) );
				var cubeMaterials = new THREE.MeshFaceMaterial( cubeMaterialArray );
				// Cube parameters: width (x), height (y), depth (z), 
				//        (optional) segments along x, segments along y, segments along z
				var boxGeometry = new THREE.BoxGeometry( 2, 2, 2, 1, 1, 1 );
				// using THREE.MeshFaceMaterial() in the constructor below
				//   causes the mesh to use the materials stored in the geometry
				cube = new THREE.Mesh( boxGeometry, cubeMaterials );
				cube.position.set(0, 0, 0);
				nScene.addToScene( cube );		
			}
		
			/**
			 * Animate the scene and call rendering.
			 */
			function animateScene() {

				// Tell the browser to call this function when page is visible
				requestAnimationFrame(animateScene);

				cube.rotation.y -= 0.05; //clock.getDelta();

				// Map the 3D scene down to the 2D screen (render the frame)
				nScene.renderScene();
			}
		</script>
	</body>
</html>
