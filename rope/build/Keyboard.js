// Generated by CoffeeScript 1.6.2
(function() {
  NH.Keyboard = (function() {
    var self;

    function Keyboard() {}

    self = Keyboard;

    Keyboard.keyDownEvents = new Array();

    Keyboard.keyUpEvents = new Array();

    (function() {
      var onKeyDown, onKeyUp;

      onKeyDown = function(event) {
        var downEvent, _i, _len, _ref;

        _ref = self.keyDownEvents;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          downEvent = _ref[_i];
          if (downEvent.key === event.keyCode && downEvent.triggered !== true) {
            downEvent.triggered = true;
            downEvent.callback();
          }
        }
        return void 0;
      };
      onKeyUp = function(event) {
        var downEvent, upEvent, _i, _j, _len, _len1, _ref, _ref1;

        _ref = self.keyDownEvents;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          downEvent = _ref[_i];
          if (downEvent.key === event.keyCode) {
            downEvent.triggered = false;
          }
        }
        _ref1 = self.keyUpEvents;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          upEvent = _ref1[_j];
          if (upEvent.key === event.keyCode) {
            upEvent.callback();
          }
        }
        return void 0;
      };
      document.addEventListener("keydown", onKeyDown, false);
      document.addEventListener("keyup", onKeyUp, false);
      return void 0;
    })();

    Keyboard.bind = function(action, boundEvent) {
      var doNotBind, downEvent, upEvent, _i, _j, _len, _len1, _ref, _ref1;

      if (action === "press") {
        _ref = this.keyDownEvents;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          downEvent = _ref[_i];
          if (downEvent.key === boundEvent.key && downEvent.callback === boundEvent.callback) {
            console.warn("The same key down event cannot be bound twice -> \nkey: " + boundEvent.key + "\ncallback: " + boundEvent.callback);
            doNotBind = true;
            break;
          }
        }
        if (!doNotBind) {
          this.keyDownEvents.push(boundEvent);
        }
      } else if (action === "release") {
        _ref1 = this.keyUpEvents;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          upEvent = _ref1[_j];
          if (upEvent.key === boundEvent.key && upEvent.callback === boundEvent.callback) {
            console.warn("The same key up event cannot be bound twice -> \nkey: " + boundEvent.key + "\ncallback: " + boundEvent.callback);
            doNotBind = true;
            break;
          }
        }
        if (!doNotBind) {
          this.keyUpEvents.push(boundEvent);
        }
      }
      return void 0;
    };

    Keyboard.unbind = function(action, boundEvent) {
      var downEvent, i, upEvent, _i, _j, _len, _len1, _ref, _ref1;

      if (action === "press") {
        _ref = this.keyDownEvents;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          downEvent = _ref[i];
          if (boundEvent.key === downEvent.key && boundEvent.callback === downEvent.callback) {
            this.keyDownEvents.splice(i, 1);
            break;
          }
        }
      } else if (action === "release") {
        _ref1 = this.keyUpEvents;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          upEvent = _ref1[i];
          if (boundEvent.key === upEvent.key && boundEvent.callback === upEvent.callback) {
            this.keyUpEvents.splice(i, 1);
            break;
          }
        }
      }
      return void 0;
    };

    return Keyboard;

  })();

}).call(this);
